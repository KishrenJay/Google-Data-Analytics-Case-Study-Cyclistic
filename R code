install.packages("tidyverse")
install.packages("lubridate")
install.packages("ggplot2")

library(tidyverse)  #helps wrangle data
library(lubridate)  #helps wrangle date attributes
library(ggplot2)  #helps visualize data
library(readr) #for importing data

getwd() #displays working directory
setwd("/Users/Kishren/Documents/4th_Year/GDA/Portfolio_&_Case_study/Case_1_cyclistic/quartile_trip_data_2019") #sets working directory for easier data calling

# STEP 1: IMPORT DATA
q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv")
q3_2019 <- read_csv("Divvy_Trips_2019_Q3.csv")
q4_2019 <- read_csv("Divvy_Trips_2019_Q4.csv")
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")

# STEP 2: WRANGLE DATA & COMBINING INTO 1 FILE
# check if all column names same
colnames(q2_2019)
colnames(q3_2019)
colnames(q4_2019)
colnames(q1_2020)

# standardize all the column names to follow 2020 before combining
q2_2019 <- rename(q2_2019, ride_id = "01 - Rental Details Rental ID", rideable_type = "01 - Rental Details Bike ID", started_at = "01 - Rental Details Local Start Time", ended_at = "01 - Rental Details Local End Time" , start_station_name = "03 - Rental Start Station Name", start_station_id = "03 - Rental Start Station ID", end_station_name = "02 - Rental End Station Name", end_station_id = "02 - Rental End Station ID", member_casual = "User Type" )
q3_2019 <- rename(q3_2019, ride_id = trip_id, rideable_type = bikeid, started_at = start_time, ended_at = end_time, start_station_name = from_station_name, start_station_id = from_station_id, end_station_name = to_station_name, end_station_id = to_station_id, member_casual = usertype)
q4_2019 <- rename(q4_2019, ride_id = trip_id, rideable_type = bikeid, started_at = start_time, ended_at = end_time, start_station_name = from_station_name, start_station_id = from_station_id, end_station_name = to_station_name, end_station_id = to_station_id, member_casual = usertype)

#Check the data types of all columns in each data to be same before combining
str(q2_2019)
str(q3_2019)
str(q4_2019)
str(q1_2020)

# change data type of ride_id and bike_id to char data type to match q1_2020 data
q2_2019 <- mutate(q2_2019, ride_id = as.character(ride_id), rideable_type = as.character(rideable_type))
q3_2019 <- mutate(q3_2019, ride_id = as.character(ride_id), rideable_type = as.character(rideable_type))
q4_2019 <- mutate(q4_2019, ride_id = as.character(ride_id), rideable_type = as.character(rideable_type))

#combine all the data into one new data frame called all_trips (use the bind_rows function to combine all rows of data frames)
all_trips <- bind_rows(q2_2019, q3_2019, q4_2019, q1_2020)

# remove unnecessary columns where not all have the data, such as  lat, long, birthyear, and gender fields as this data was dropped beginning in 2020
all_trips <- all_trips %>%
  select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender, "01 - Rental Details Duration In Seconds Uncapped", "05 - Member Details Member Birthday Year", "Member Gender","tripduration"))

# STEP 3: CLEAN UP AND ADD DATA TO PREPARE FOR ANALYSIS
colnames(all_trips)
nrow(all_trips)
dim(all_trips)
head(all_trips)
tail(all_trips)
str(all_trips)
summary(all_trips)

# Before 2020, Divvy used different labels for these two types of riders, need consistent nomenclature, make subscriber to member and customer to casual
# Begin by seeing how many observations fall under each usertype using the table(tablename,column_name) function

table(all_trips$member_casual)

# Reassign to the desired values using the mutate function to edit member_casual column and recode(columnname,old value = new value) function
all_trips <- all_trips %>%
  mutate(member_casual = recode(member_casual, "Subscriber" = "member", "Customer" = "casual"))

# Check to make sure the proper number of observations were reassigned using the table function again
table(all_trips$member_casual)

# Add columns that list the date, month, day, and year of each ride
all_trips$date <- as.Date(all_trips$started_at) 

# Use the format(as.Date(tablename$columnname), "%m") for month or "%d" for day, "%Y" for year, or "%A" for day of week
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")

# Add a "ride_length" calculation to all_trips (in seconds) using the difftime(tablename$columnname2,tablename$columnname1)
all_trips$ride_length <- difftime(all_trips$ended_at, all_trips$started_at)

# Inspect the structure of the columns in between cleaning
str(all_trips)
# double check is new ride length column num datatype for calc later
is.numeric(all_trips$ride_length)
# since false, we need to change to num datatype
all_trips$ride_length <- as.numeric(all_trips$ride_length)
is.numeric(all_trips$ride_length)

# check if got negative values in column could mean 'bad' data
table(all_trips$ride_length<0)
table(all_trips$start_station_name)
# Remove "bad" data using | operator (or), to delete rows having negative ride length and hq qr as start station
# The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative
# make sure new data after deleting rows is in a new dataframe, dont ever lose the original dataframe

all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]

# STEP 4: DESCRIPTIVE ANALYSIS
# Descriptive analysis on ride_length (in seconds)
mean(all_trips_v2$ride_length)
median(all_trips_v2$ride_length)
max(all_trips_v2$ride_length)
min(all_trips_v2$ride_length)
# or summarize in one code using summary function
summary(all_trips_v2$ride_length)

# compare data of member and casual groups using the aggregate(data$column_to_match ~ data$column_for_ref + data$column_ref2 + etc, FUN = mean ) function, or median, max, min
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)

# average ride time by each day for members vs casual users using aggregate like 'group by' and + another reference column for day of week
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

# analyze ridership data by type and weekday
all_trips_v2 %>%
  mutate(weekday = wday(started_at, label = TRUE))%>%      #creates weekday field using wday() somehow helps arrange properly sun to sat days
  group_by(member_casual,weekday)%>%                                          #groups by usertype and weekday
  summarise(number_of_rides = n(), average_duration = mean(ride_length))%>%   #n() for observation in that category
  arrange(member_casual, weekday)                                             #sorts

#finding the top 10 start stations
top_start_stations <- data.frame(table(all_trips_v2$start_station_name))
top_start_stations <- top_start_stations %>% arrange(-Freq)
top_start_stations <- data.frame(head(top_start_stations,10))
top_start_stations <- rename(top_start_stations, start_station_name = Var1, count = Freq)


#visualization for top 10 start stations
top_start_stations %>%
  ggplot(aes (x = reorder(start_station_name, -count), y = count)) +
  geom_bar(stat = "identity", color="black", fill=rgb(0.1,0.4,0.5,0.7))+
  labs(title = "Top 10 Start Stations for Rides", x = "Start Station Name", y = "Count")+
  coord_flip()

# visualization for number of rides on weekdays
all_trips_v2 %>%
  mutate(weekday = wday(started_at, label = TRUE)) %>%
  group_by(member_casual, weekday) %>%
  summarise(number_of_rides = n(),average_duration = mean(ride_length)) %>%
  arrange(member_casual, weekday) %>%
  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge") +
  geom_text(aes(label = number_of_rides), vjust = 1.5, colour = "black", size = 3) +
  labs(title = "Number of Rides each Day of the Week", x= "Day", y = "Number of Rides")+
  theme(plot.title = element_text(hjust = 0.5))

# visualization for average duration of weekdays
all_trips_v2 %>%
  mutate(weekday = wday(started_at, label = TRUE)) %>%
  group_by(member_casual, weekday) %>%
  summarise(number_of_rides = n(),average_duration = mean(ride_length/60)) %>%
  arrange(member_casual, weekday) %>%
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge")+
  geom_text(aes(label = round(average_duration, digits = 2)), vjust = 1.5, colour = "black", size = 3)+
  labs(title = "Average Duration per Ride each Day of the Week", x= "Day", y = "Average Duration(min)")+
  theme(plot.title = element_text(hjust = 0.5))

# get time from date, put in a new column and analyze usage by time periods (2 Plots one for weekends, one for weekdays)
time_in_hours <- c(format(as.POSIXct(all_trips_v2$started_at), format = "%H")) 
all_trips_v2$hourly_interval <- time_in_hours

# Mon to Fri
all_trips_v2%>%
  group_by(member_casual, hourly_interval, day_of_week != "Saturday" | day_of_week != "Sunday")%>%
  summarise(number_of_rides = n()/7, hourly_interval)%>%
  arrange(member_casual, hourly_interval)%>%
  ggplot(aes(x = hourly_interval, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")+
  labs(title = "Average Number of Rides on Weekdays", x= "Hourly Interval", y = "Average Number of Rides")+
  theme(plot.title = element_text(hjust = 0.5))

# Sat and Sun
all_trips_v2%>%
  group_by(member_casual, hourly_interval, day_of_week == "Saturday" | day_of_week == "Sunday")%>%
  summarise(number_of_rides = n()/2, hourly_interval)%>%
  arrange(member_casual, hourly_interval)%>%
  ggplot(aes(x = hourly_interval, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")+
  labs(title = "Average Number of Rides on Weekends", x= "Hourly Interval", y = "Average Number of Rides")+
  theme(plot.title = element_text(hjust = 0.5))

# Mon
all_trips_v2%>%
  group_by(member_casual, hourly_interval, day_of_week = "Monday")%>%
  summarise(number_of_rides = n(), hourly_interval)%>%
  arrange(member_casual, hourly_interval)%>%
  ggplot(aes(x = hourly_interval, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")+
  labs(title = "Total Number of Rides on Mondays", x= "Hourly Interval", y = "Total Number of Rides")+
  theme(plot.title = element_text(hjust = 0.5))


# Tue
all_trips_v2%>%
  group_by(member_casual, hourly_interval, day_of_week = "Tuesday")%>%
  summarise(number_of_rides = n(), hourly_interval)%>%
  arrange(member_casual, hourly_interval)%>%
  ggplot(aes(x = hourly_interval, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")+
  labs(title = "Total Number of Rides on Tuesdays", x= "Hourly Interval", y = "Total Number of Rides")+
  theme(plot.title = element_text(hjust = 0.5))

# Wed
all_trips_v2%>%
  group_by(member_casual, hourly_interval, day_of_week = "Wednesday")%>%
  summarise(number_of_rides = n(), hourly_interval)%>%
  arrange(member_casual, hourly_interval)%>%
  ggplot(aes(x = hourly_interval, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")+
  labs(title = "Total Number of Rides on Wednesdays", x= "Hourly Interval", y = "Total Number of Rides")+
  theme(plot.title = element_text(hjust = 0.5))


# Thur
all_trips_v2%>%
  group_by(member_casual, hourly_interval, day_of_week = "Thursday")%>%
  summarise(number_of_rides = n(), hourly_interval)%>%
  arrange(member_casual, hourly_interval)%>%
  ggplot(aes(x = hourly_interval, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")+
  labs(title = "Total Number of Rides on Thursdays", x= "Hourly Interval", y = "Total Number of Rides")+
  theme(plot.title = element_text(hjust = 0.5))

# Fri
all_trips_v2%>%
  group_by(member_casual, hourly_interval, day_of_week = "Friday")%>%
  summarise(number_of_rides = n(), hourly_interval)%>%
  arrange(member_casual, hourly_interval)%>%
  ggplot(aes(x = hourly_interval, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")+
  labs(title = "Total Number of Rides on Fridays", x= "Hourly Interval", y = "Total Number of Rides")+
  theme(plot.title = element_text(hjust = 0.5))

# Sat
all_trips_v2%>%
  group_by(member_casual, hourly_interval, day_of_week = "Saturday")%>%
  summarise(number_of_rides = n(), hourly_interval)%>%
  arrange(member_casual, hourly_interval)%>%
  ggplot(aes(x = hourly_interval, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")+
  labs(title = "Total Number of Rides on Saturdays", x= "Hourly Interval", y = "Total Number of Rides")+
  theme(plot.title = element_text(hjust = 0.5))

# Sun
all_trips_v2%>%
  group_by(member_casual, hourly_interval, day_of_week = "Sunday")%>%
  summarise(number_of_rides = n(), hourly_interval)%>%
  arrange(member_casual, hourly_interval)%>%
  ggplot(aes(x = hourly_interval, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")+
  labs(title = "Total Number of Rides on Sundays", x= "Hourly Interval", y = "Total Number of Rides")+
  theme(plot.title = element_text(hjust = 0.5))
